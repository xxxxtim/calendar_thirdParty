{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","gapi","window","console","log","CLIENT_ID","API_KEY","DISCOVERY_DOCS","SCOPES","className","src","logo","alt","style","fontSize","width","height","onClick","load","client","init","apiKey","clientId","discoveryDocs","scope","auth2","getAuthInstance","signIn","then","calendar","events","list","calendarId","timeMin","Date","toISOString","showDeleted","singleEvents","maxResults","orderBy","response","result","items","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,kC,8KCsJ5BC,MAlJf,WACE,IAAIC,EAAOC,OAAOD,KAClBE,QAAQC,IAAI,OAAQH,GAIpB,IAAII,EACF,4EACEC,EAAU,0CACVC,EAAiB,CACnB,iEAEEC,EAAS,kDAgHb,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,oEACA,uBAAGC,MAAO,CAAEC,SAAU,KAAtB,+CAGA,uBAAGD,MAAO,CAAEC,SAAU,KAAtB,kDAGA,4BAAQD,MAAO,CAAEE,MAAO,IAAKC,OAAQ,IAAMC,QAzHhC,WACfhB,EAAKiB,KAAK,gBAAgB,WACxBf,QAAQC,IAAI,iBAEZH,EAAKkB,OAAOC,KAAK,CACfC,OAAQf,EACRgB,SAAUjB,EACVkB,cAAehB,EACfiB,MAAOhB,IAGTP,EAAKkB,OAAOD,KAAK,WAAY,MAAM,kBAAMf,QAAQC,IAAI,WAErDH,EAAKwB,MACFC,kBACAC,SACAC,MAAK,WA0CJ3B,EAAKkB,OAAOU,SAASC,OAClBC,KAAK,CACJC,WAAY,UACZC,SAAS,IAAIC,MAAOC,cACpBC,aAAa,EACbC,cAAc,EACdC,WAAY,GACZC,QAAS,cAEVX,MAAK,SAACY,GACL,IAAMV,EAASU,EAASC,OAAOC,MAC/BvC,QAAQC,IAAI,WAAY0B,cAoD9B,aAGA,4BAAQjB,MAAO,CAAEE,MAAO,IAAKC,OAAQ,IAAMC,QAjDhC,WACfhB,EAAKiB,KAAK,gBAAgB,WACxBf,QAAQC,IAAI,iBAEZH,EAAKkB,OAAOC,KAAK,CACfC,OAAQf,EACRgB,SAAUjB,EACVkB,cAAehB,EACfiB,MAAOhB,IAGTP,EAAKkB,OAAOD,KAAK,WAAY,MAAM,kBAAMf,QAAQC,IAAI,WAErDH,EAAKwB,MACFC,kBACAC,SACAC,MAAK,WAEJ3B,EAAKkB,OAAOU,SAASC,OAClBC,KAAK,CACJC,WAAY,UACZC,SAAS,IAAIC,MAAOC,cACpBC,aAAa,EACbC,cAAc,EACdC,WAAY,GACZC,QAAS,cAEVX,MAAK,SAACY,GACL,IAAMV,EAASU,EAASC,OAAOC,MAC/BvC,QAAQC,IAAI,WAAY0B,cAoB9B,gBClIYa,QACW,cAA7BzC,OAAO0C,SAASC,UAEe,UAA7B3C,OAAO0C,SAASC,UAEhB3C,OAAO0C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvD,QAAQuD,MAAMA,EAAMC,c","file":"static/js/main.ebe89fe8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nfunction App() {\n  var gapi = window.gapi;\n  console.log(\"gapi\", gapi);\n  /* \n    Update with your own Client Id and Api key \n  */\n  var CLIENT_ID =\n    \"1053651962583-0nsvcp5nrj021hb055l2107aslpeu2t2.apps.googleusercontent.com\";\n  var API_KEY = \"AIzaSyAt_lNk8NKn9k5K5uQb2wLPhhjXgzTBxKw\";\n  var DISCOVERY_DOCS = [\n    \"https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest\",\n  ];\n  var SCOPES = \"https://www.googleapis.com/auth/calendar.events\";\n\n  const addEvent = () => {\n    gapi.load(\"client:auth2\", () => {\n      console.log(\"loaded client\");\n\n      gapi.client.init({\n        apiKey: API_KEY,\n        clientId: CLIENT_ID,\n        discoveryDocs: DISCOVERY_DOCS,\n        scope: SCOPES,\n      });\n\n      gapi.client.load(\"calendar\", \"v3\", () => console.log(\"bam!\"));\n\n      gapi.auth2\n        .getAuthInstance()\n        .signIn()\n        .then(() => {\n          var event = {\n            summary: \"吃飯飯\",\n            location: \"Taipei 101\",\n            description: \"甲奔\",\n            start: {\n              dateTime: \"2021-06-28T09:00:00-07:00\",\n              timeZone: \"Asia/Taipei\",\n            },\n            end: {\n              dateTime: \"2021-06-29T17:00:00-07:00\",\n              timeZone: \"Asia/Taipei\",\n            },\n            recurrence: [\"RRULE:FREQ=DAILY;COUNT=1\"],\n            attendees: [\n              { email: \"yachen@example.com\" },\n              { email: \"ken@example.com\" },\n            ],\n            reminders: {\n              useDefault: false,\n              overrides: [\n                { method: \"email\", minutes: 24 * 60 },\n                { method: \"popup\", minutes: 10 },\n              ],\n            },\n          };\n\n          // var request = gapi.client.calendar.events.insert({\n          //   calendarId: \"primary\",\n          //   resource: event,\n          // });\n\n          // request.execute((event) => {\n          //   console.log(event);\n          //   window.open(event.htmlLink);\n          // });\n\n          /*\n            Uncomment the following block to get events\n        */\n\n          // get events\n          gapi.client.calendar.events\n            .list({\n              calendarId: \"primary\",\n              timeMin: new Date().toISOString(),\n              showDeleted: false,\n              singleEvents: true,\n              maxResults: 10,\n              orderBy: \"startTime\",\n            })\n            .then((response) => {\n              const events = response.result.items;\n              console.log(\"EVENTS: \", events);\n            });\n        });\n    });\n  };\n\n  const getEvent = () => {\n    gapi.load(\"client:auth2\", () => {\n      console.log(\"loaded client\");\n\n      gapi.client.init({\n        apiKey: API_KEY,\n        clientId: CLIENT_ID,\n        discoveryDocs: DISCOVERY_DOCS,\n        scope: SCOPES,\n      });\n\n      gapi.client.load(\"calendar\", \"v3\", () => console.log(\"bam!\"));\n\n      gapi.auth2\n        .getAuthInstance()\n        .signIn()\n        .then(() => {\n          // get events\n          gapi.client.calendar.events\n            .list({\n              calendarId: \"primary\",\n              timeMin: new Date().toISOString(),\n              showDeleted: false,\n              singleEvents: true,\n              maxResults: 10,\n              orderBy: \"startTime\",\n            })\n            .then((response) => {\n              const events = response.result.items;\n              console.log(\"EVENTS: \", events);\n            });\n        });\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>Click to add event to Google Calendar</p>\n        <p style={{ fontSize: 18 }}>\n          Uncomment the get events code to get events\n        </p>\n        <p style={{ fontSize: 18 }}>\n          Don't forget to add your Client Id and Api key\n        </p>\n        <button style={{ width: 100, height: 50 }} onClick={addEvent}>\n          Add Event\n        </button>\n        <button style={{ width: 100, height: 50 }} onClick={getEvent}>\n          get Event\n        </button>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}